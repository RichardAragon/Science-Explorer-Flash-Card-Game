import React, { useState } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AlertCircle, CheckCircle2, Plus, Trash2 } from 'lucide-react';

const initialTopics = [
  {
    name: "Solar System",
    questions: [
      {
        question: "Which planet is known as the Red Planet?",
        options: ["Venus", "Mars", "Jupiter", "Saturn"],
        correctAnswer: "Mars"
      },
      {
        question: "What is the largest planet in our solar system?",
        options: ["Earth", "Mars", "Jupiter", "Neptune"],
        correctAnswer: "Jupiter"
      },
      {
        question: "Which planet is closest to the Sun?",
        options: ["Mercury", "Venus", "Earth", "Mars"],
        correctAnswer: "Mercury"
      }
    ]
  },
  {
    name: "Animals",
    questions: [
      {
        question: "Which animal lays eggs?",
        options: ["Dog", "Cat", "Bird", "Elephant"],
        correctAnswer: "Bird"
      },
      {
        question: "What do plants need to grow?",
        options: ["Sunlight", "Water", "Soil", "All of these"],
        correctAnswer: "All of these"
      },
      {
        question: "Which animal can change its skin color?",
        options: ["Lion", "Chameleon", "Giraffe", "Zebra"],
        correctAnswer: "Chameleon"
      }
    ]
  }
];

const ScienceExplorerGame = () => {
  const [topics, setTopics] = useState(initialTopics);
  const [currentTopic, setCurrentTopic] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [gameOver, setGameOver] = useState(false);
  const [isEditorMode, setIsEditorMode] = useState(false);
  const [newQuestion, setNewQuestion] = useState({
    question: "",
    options: ["", "", "", ""],
    correctAnswer: ""
  });
  const [newTopic, setNewTopic] = useState("");
  const [selectedTopicForNewQuestion, setSelectedTopicForNewQuestion] = useState(0);

  const handleAnswer = (answer) => {
    setSelectedAnswer(answer);
    if (answer === topics[currentTopic].questions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }
    setShowResult(true);
  };

  const nextQuestion = () => {
    setShowResult(false);
    setSelectedAnswer(null);
    if (currentQuestion < topics[currentTopic].questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else if (currentTopic < topics.length - 1) {
      setCurrentTopic(currentTopic + 1);
      setCurrentQuestion(0);
    } else {
      setGameOver(true);
    }
  };

  const restartGame = () => {
    setCurrentTopic(0);
    setCurrentQuestion(0);
    setScore(0);
    setShowResult(false);
    setSelectedAnswer(null);
    setGameOver(false);
  };

  const toggleMode = () => {
    setIsEditorMode(!isEditorMode);
    restartGame();
  };

  const handleNewQuestionChange = (field, value, index = null) => {
    if (field === 'options') {
      setNewQuestion(prev => ({
        ...prev,
        options: prev.options.map((opt, i) => i === index ? value : opt)
      }));
    } else {
      setNewQuestion(prev => ({ ...prev, [field]: value }));
    }
  };

  const addNewQuestion = () => {
    if (newQuestion.question && newQuestion.options.every(opt => opt) && newQuestion.correctAnswer) {
      setTopics(prev => prev.map((topic, i) => 
        i === selectedTopicForNewQuestion 
          ? { ...topic, questions: [...topic.questions, newQuestion] }
          : topic
      ));
      setNewQuestion({
        question: "",
        options: ["", "", "", ""],
        correctAnswer: ""
      });
    }
  };

  const removeQuestion = (questionIndex) => {
    setTopics(prev => prev.map((topic, i) => 
      i === currentTopic 
        ? { ...topic, questions: topic.questions.filter((_, i) => i !== questionIndex) }
        : topic
    ));
  };

  const addNewTopic = () => {
    if (newTopic) {
      setTopics(prev => [...prev, { name: newTopic, questions: [] }]);
      setNewTopic("");
    }
  };

  const removeTopic = (topicIndex) => {
    setTopics(prev => prev.filter((_, i) => i !== topicIndex));
  };

  const totalQuestions = topics.reduce((sum, topic) => sum + topic.questions.length, 0);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader className="text-2xl font-bold text-center bg-blue-500 text-white p-4 rounded-t-lg flex justify-between items-center">
          <span>Science Explorer</span>
          <Button onClick={toggleMode} className="bg-white text-blue-500 hover:bg-blue-100">
            {isEditorMode ? "Play Mode" : "Editor Mode"}
          </Button>
        </CardHeader>
        <CardContent className="p-6">
          {!isEditorMode ? (
            !gameOver ? (
              <>
                <h2 className="text-xl font-semibold mb-4">{topics[currentTopic].name}</h2>
                <p className="mb-4">{topics[currentTopic].questions[currentQuestion].question}</p>
                <div className="space-y-2">
                  {topics[currentTopic].questions[currentQuestion].options.map((option, index) => (
                    <Button
                      key={index}
                      onClick={() => handleAnswer(option)}
                      disabled={showResult}
                      className={`w-full ${
                        selectedAnswer === option
                          ? option === topics[currentTopic].questions[currentQuestion].correctAnswer
                            ? 'bg-green-500 hover:bg-green-600'
                            : 'bg-red-500 hover:bg-red-600'
                          : 'bg-blue-500 hover:bg-blue-600'
                      }`}
                    >
                      {option}
                    </Button>
                  ))}
                </div>
                {showResult && (
                  <div className="mt-4 flex items-center justify-between">
                    {selectedAnswer === topics[currentTopic].questions[currentQuestion].correctAnswer ? (
                      <div className="flex items-center text-green-500">
                        <CheckCircle2 className="mr-2" />
                        Correct!
                      </div>
                    ) : (
                      <div className="flex items-center text-red-500">
                        <AlertCircle className="mr-2" />
                        Incorrect. The correct answer is {topics[currentTopic].questions[currentQuestion].correctAnswer}.
                      </div>
                    )}
                    <Button onClick={nextQuestion} className="bg-blue-500 hover:bg-blue-600">
                      Next
                    </Button>
                  </div>
                )}
              </>
            ) : (
              <div className="text-center">
                <h2 className="text-2xl font-bold mb-4">Game Over!</h2>
                <p className="text-xl mb-4">Your score: {score} out of {totalQuestions}</p>
                <Button onClick={restartGame} className="bg-blue-500 hover:bg-blue-600">
                  Play Again
                </Button>
              </div>
            )
          ) : (
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold mb-2">Add New Topic</h2>
                <div className="flex space-x-2">
                  <Input 
                    value={newTopic}
                    onChange={(e) => setNewTopic(e.target.value)}
                    placeholder="Enter new topic name"
                  />
                  <Button onClick={addNewTopic} className="bg-green-500 hover:bg-green-600">
                    <Plus size={20} />
                  </Button>
                </div>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">Edit Topics</h2>
                {topics.map((topic, topicIndex) => (
                  <div key={topicIndex} className="mb-4 p-2 border rounded">
                    <div className="flex justify-between items-center mb-2">
                      <h3 className="text-lg font-medium">{topic.name}</h3>
                      <Button onClick={() => removeTopic(topicIndex)} className="bg-red-500 hover:bg-red-600">
                        <Trash2 size={20} />
                      </Button>
                    </div>
                    {topic.questions.map((q, questionIndex) => (
                      <div key={questionIndex} className="ml-4 mb-2 flex justify-between items-center">
                        <span>{q.question}</span>
                        <Button onClick={() => removeQuestion(questionIndex)} className="bg-red-500 hover:bg-red-600">
                          <Trash2 size={20} />
                        </Button>
                      </div>
                    ))}
                  </div>
                ))}
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">Add New Question</h2>
                <Select
                  value={selectedTopicForNewQuestion.toString()}
                  onValueChange={(value) => setSelectedTopicForNewQuestion(Number(value))}
                >
                  <SelectTrigger className="w-full mb-2">
                    <SelectValue placeholder="Select a topic" />
                  </SelectTrigger>
                  <SelectContent>
                    {topics.map((topic, index) => (
                      <SelectItem key={index} value={index.toString()}>
                        {topic.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Input 
                  value={newQuestion.question}
                  onChange={(e) => handleNewQuestionChange('question', e.target.value)}
                  placeholder="Enter question"
                  className="mb-2"
                />
                {newQuestion.options.map((option, index) => (
                  <Input 
                    key={index}
                    value={option}
                    onChange={(e) => handleNewQuestionChange('options', e.target.value, index)}
                    placeholder={`Option ${index + 1}`}
                    className="mb-2"
                  />
                ))}
                <Input 
                  value={newQuestion.correctAnswer}
                  onChange={(e) => handleNewQuestionChange('correctAnswer', e.target.value)}
                  placeholder="Correct answer"
                  className="mb-2"
                />
                <Button onClick={addNewQuestion} className="bg-green-500 hover:bg-green-600 w-full">
                  Add Question
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
      {!isEditorMode && (
        <div className="w-full max-w-2xl mt-4">
          <Progress value={(currentTopic * topics[0].questions.length + currentQuestion + 1) / totalQuestions * 100} className="w-full" />
        </div>
      )}
    </div>
  );
};

export default ScienceExplorerGame;
